#예제 3-1 책 페이지 87쪽

# 당신은 음식점의 계산을 도와주는 점원이고, 손님에게 거슬러줘야하는 돈은 1260원이고,
# 카운터에는 거스름돈으로 사용할 500원,100원,50원, 10원 짜리 동전이 무한히 존재
# 거슬러줘야하는 동전을 최소 갯수 구해보자

# 먼저 이런 문제는 greedy로 풀 수 있는지 판단하는게 중요.

N = 1260 #거슬러줘야하는 돈
list = [500,100,50,10] #무한히 쌓인 동전들

count=0 #최소갯수. 일단 0으로 초기화해놓자

for i in list: #for문 하나로 다 처리하자
    c = N//i #먼저 1260원을 카운터 동전 큰거부터 나눠보자
    if c!=0: #만약 0이 아니라면 나눠지는 거니까
        count += c #그 몫을 count에 추가한다.
        N = N % i #그리고 그 나머지로 N을 초기화하자
print(count)





#[시간복잡도 정리]
# 화폐의 종류가 K개라고 할때 코드의 복잡도는 O(K)이다.
# 왜냐? 리스트를 화폐종류갯수만큼 도니까.

#[그리디의 문제]
# 이 문제는 동전의 종류가 큰게 작은거의 배수라서 그리디가 가능했던 거임
# 만약 800원을 거슬러주는데 화폐가 500,400,100 원이 있으면 그리디로 풀면 500+100+100+100이 나오지만 사실은 400+400
# ** 어떤 문제를 만났을때, 바로 문제유형 파악하기 힘들다면 그리디 풀이법 생각해보고, 그게 없다면, dp나 그래프를 고려하자.

#[처음에 잘못 생각한 풀이]
    # while True:  # N이 0이 될 때까지 한번 빼볼까?? 일단 계속 돌리자
#
#     if N==0: #N이 0이되면 멈추고 count를 출력할거야.
#         print(count)
#         break
#     # 가장 좋은 거 (그니까 큰거) 먼저 빼봐야하니까 나눠보자.
#     # 방금 든 생각이 while문을 돌릴 필요가 없는것 같다.
#     # while문 돌리면 어짜피 안에 for문 돌려야하자나
#